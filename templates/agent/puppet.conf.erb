### Next part of the file is managed by a different template ###
## Module:           '<%= scope.to_hash['module_name'] %>'

[agent]
    # The file in which puppetd stores a list of the classes
    # associated with the retrieved configuration.  Can be loaded in
    # the separate ``puppet`` executable using the ``--loadclasses``
    # option.
    # The default value is '$statedir/classes.txt'.
    classfile = <%= scope.lookupvar('::puppet::classfile') %>

    # Where puppetd caches the local configuration.  An
    # extension indicating the cache format is added automatically.
    # The default value is '$confdir/localconfig'.
    localconfig = $vardir/localconfig

    # Disable the default schedules as they cause continual skipped
    # resources to be displayed in Foreman - only for Puppet >= 3.4
    default_schedules = false

    report            = true
    pluginsync        = <%= scope.lookupvar('::puppet::pluginsync') %>
    masterport        = <%= scope.lookupvar("::puppet::port") rescue 8140 %>
    environment       = <%= scope.lookupvar("::puppet::environment") %>
    certname          = <%= @clientcert %>
<% if !@use_srv_records -%>
    server            = <%= if ( @puppetmaster and !@puppetmaster.empty? ) then @puppetmaster else @fqdn end %>
<% end -%>
    listen            = <%= scope.lookupvar('::puppet::listen') %>
    runinterval       = <%= scope.lookupvar('::puppet::runinterval') %>
    noop              = <%= scope.lookupvar('::puppet::agent_noop') %>
<% unless [nil, :undefined, :undef].include?(scope.lookupvar('::puppet::configtimeout')) -%>
    configtimeout     = <%= scope.lookupvar('::puppet::configtimeout') %>
<% end -%>
    usecacheonfailure = <%= scope.lookupvar('::puppet::usecacheonfailure') %>
<% unless [nil, :undefined, :undef].include?(scope.lookupvar('::puppet::prerun_command')) -%>
    prerun_command    = <%= scope.lookupvar('::puppet::prerun_command') %>
<% end -%>
<% unless [nil, :undefined, :undef].include?(scope.lookupvar('::puppet::postrun_command')) -%>
    postrun_command   = <%= scope.lookupvar('::puppet::postrun_command') %>
<% end -%>
<% scope.lookupvar("puppet::agent_additional_settings").sort_by {|k, v| k}.each do |key, value| -%>
    <%= key %> = <%= value %>
<% end -%>
